#ifndef RAYTRACER_SCENE_H
#define RAYTRACER_SCENE_H

#include <vector>
#include "Camera.h"
#include "Sphere.h"
#include "Mesh.h"
#include "Color.h"
#include "PointLight.h"
#include "Vertex.h"

class Scene {

public:
    std::vector<Vertex> _vertices;

    std::vector<Camera> _cameras;
    std::vector<Sphere> _spheres;
    std::vector<Mesh>   _meshes;

    std::vector<Material> _materials;

    std::vector<PointLight> _lights;

    int _rayReflect;
    Color _background;
    Color _ambient;

    const std::vector<Camera>& Cameras() const {
        return _cameras;
    }

    //////////////////////////////
    // READ SCENE FUNCTIONS HERE !
    //////////////////////////////
};

Scene* CurrentScene;

void ReadScene(int argc, char** argv)
{
    std::string scene_file(argv[1]);
	std::string camera_file(argv[1]);
	std::string bullshit;

	std::ifstream scenestream(scene_file);

	CurrentScene = new Scene();

	scenestream >> CurrentScene->_rayReflect;
	scenestream >> CurrentScene->_background;
	scenestream >> CurrentScene->_ambient;

	int N;
	scenestream >> N;
	(CurrentScene->_lights).resize(N);
	for(int i=0; i<N; i++) {
		scenestream >> ((CurrentScene->_lights)[i]).pos;
		scenestream >> ((CurrentScene->_lights)[i]).intensity;
	}

	scenestream >> N;
	(CurrentScene->_materials).resize(N);
	for(int i=0; i<N; i++) {
		scenestream >> ((CurrentScene->_materials)[i]);
	}

	scenestream >> N;
	scenestream >> bullshit >> bullshit;
	(CurrentScene->_vertices).resize(N);
	for(int i=0; i<N; i++) {
		scenestream >> ((CurrentScene->_vertices)[i]);
	}

	scenestream >> N;
	for(int i=0; i<N; i++) {
		scenestream >> bullshit;
		if(bullshit == std::string("#Mesh")) {
			
		} else {
		}
	}
}

#endif //RAYTRACER_SCENE_H
